---

# Ansible community.general.pacman required
# Use : ansible-galaxy collection install community.general
- name: Install needed packages
  community.general.pacman:
    name: 
      - alacritty
      - blueman
      - bluez-utils
      - flameshot
      - fzf
      - geeqie
      - otf-font-awesome
      - playerctl
      - polybar
      - python-pywal
      - vim
      - neovim
      - yay
      - zsh
      - docker
      - dialog
      - redshift
      - nodejs
      - npm
      - texlive-most
      - texlive-langgreek
    state: present
  become: true

# Uninstall picom if installed
#- name: Remove picom if installed 
#  community.general.pacman:
#    name: 
#      - picom
#    state: absent
#  become: true

### Docker ###

- name: Start systemctl docker daemon
  shell: "systemctl start docker"
  tags:
    - docker

- name: Add it to sudo users
  shell: "sudo groupadd docker && sudo usermod -aG docker $USER"
  tags:
    - docker

### Docker ###

################### REDSHIFT ########################
- name: redshift alias night
  lineinfile:
    dest: ~/.zshrc
    line: 'alias night="redshift -O 3500"'
    state: present


- name: redshift alias day
  lineinfile:
    dest: ~/.zshrc
    line: 'alias day="redshift -x"'
    state: present

##################### NVIM STUFF #################################
- name: neovim alias 
  lineinfile:
    dest: ~/.zshrc
    line: 'alias nv="nvim"'
    state: present
      

- name: check that config of nvim exists
  stat:
    path: ~/.config/nvim
  register: nvim_config_exists

- name: If exists, make the backup ( for now , just remove)
  command: rm -r  ~/.config/nvim/ #~/.config/nvim.bak"
  when: nvim_config_exists.stat.exists

- name: check that local share of nvim exists
  stat:
    path: ~/.local/share/nvim
  register: nvim_share_exists

- name: If exists, move it 
  command: rm -r ~/.local/share/nvim
  when: nvim_share_exists.stat.exists

- name: check that local share of nvim exists
  stat:
    path: ~/.local/state/nvim
  register: nvim_state_exists

- name: If exists, move it 
  command: rm -r ~/.local/state/nvim
  when: nvim_state_exists.stat.exists

- name: check that local share of nvim exists
  stat:
    path: ~/.cache/nvim
  register: nvim_cache_exists

- name: If exists, move it 
  command: rm -r ~/.cache/nvim
  when: nvim_cache_exists.stat.exists


- name: Cloning Astronvim
  git:
    repo=https://github.com/AstroNvim/AstroNvim
    dest=~/.config/nvim

########## END NVIM STUFF ########################


################ RUST START YEAH ######################

- name: check if cargo is installed
  shell: command -v cargo
  register: cargo_exists
  ignore_errors: yes

- name: Download Installer
  when: cargo_exists is failed
  get_url:
    url: https://sh.rustup.rs
    dest: /tmp/sh.rustup.rs
    mode: '0755'
    force: 'yes'
  tags:
    - rust

- name: install rust/cargo
  when: cargo_exists is failed
  shell: /tmp/sh.rustup.rs -y
  tags:
    - rust

- name: source rust
  lineinfile:
    dest: ~/.zshrc
    line: '[ -f ~/.cargo/env ] && source $HOME/.cargo/env'
    state: present
############### RUST END YEAH ########################

- name: install broot 
  command: cargo install --git https://github.com/Canop/broot

- name: install rust diff 
  command: cargo install --git https://github.com/dandavison/delta


- name: Check if git config exists
  ansible.builtin.stat:
    path: ~/.gitconfig
  register: gitconfig_exists

- name: If not, make it
  command: touch ~/.gitconfig
  when: not gitconfig_exists

    #- name: Set gitconfig user name and email
    #  ini_file:
    #    path: ~/.gitconfig
    #    section: core
    #    option: pager
    #    value: delta
    #  become: true
    #
    #
    #- name: Add section to gitconfig
    #  ini_file:
    #    path: ~/.gitconfig
    #    block:
    #      newsection:
    #        option1: value1
    #        option2: value2
    #  become: true



################## HASKELL ############################

- name: Check if Haskell is installed
  command: ghc --version
  register: haskell_installed
  tags: 
    - haskell


- name: Install Haskell Stack
  shell: "curl -sSL https://get.haskellstack.org/ | sh"
  when: not haskell_installed
  tags:
    - haskell

################## HASKELL ###########################




############### YAY ##################################
# Ansible kewlfft.aur required
# Use : ansible-galaxy collection install kewlfft.aur
- name: Install AUR needed packages using yay
  kewlfft.aur.aur:
    use: yay
    name:
      - picom-ibhagwan-git
  become: false

- name: Check if .oh-my-zsh exists
  stat:
    path: ~/.oh-my-zsh
  register: oh_my_zsh_result

- name: Cloning oh-my-zsh
  git:
    repo=https://github.com/robbyrussell/oh-my-zsh
    dest=~/.oh-my-zsh
  when: not oh_my_zsh_result.stat.exists

- name: Check if zsh-syntax-highlighting plugin exists
  stat:
    path: ~/.oh-my-zsh/plugins/zsh-syntax-highlighting
  register: zsh_syntax_highlighting_result
  
- name: Cloning zsh-syntax-highlighting plugin into oh-my-zsh folder
  git:
    repo=https://github.com/zsh-users/zsh-syntax-highlighting.git
    dest=~/.oh-my-zsh/plugins/zsh-syntax-highlighting
  when: not zsh_syntax_highlighting_result.stat.exists

- name: Check if cdimascio-lambda theme exists
  stat:
    path: ~/.oh-my-zsh/themes/cdimascio-lambda.zsh-theme
  register: cdimascio_lambda_result

- name: Cloning cdimascio-lambda theme repository into /tmp
  git:
    repo=https://github.com/cdimascio/lambda-zsh-theme.git
    dest=/tmp/cdimascio-lambda/
  when: not cdimascio_lambda_result.stat.exists

- name: Move cdimascio-lambda theme to oh-my-zsh themes folder
  command: mv -f /tmp/cdimascio-lambda/cdimascio-lambda.zsh-theme ~/.oh-my-zsh/themes/cdimascio-lambda.zsh-theme
  when: not cdimascio_lambda_result.stat.exists

- name: Removing cdimascio-lambda theme repository
  file:
    path: /tmp/cdimascio-lambda/
    state: absent
  when: not cdimascio_lambda_result.stat.exists

- name: Change user shell to zsh 
  user:
    name: "{{ ansible_user_id }}"
    shell: /bin/zsh
  become: true
